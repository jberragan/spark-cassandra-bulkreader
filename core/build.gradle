project(':core') {
    apply plugin: 'jacoco'
    apply plugin: 'java'

    apply from: "../profiles/scala-${project.rootProject.ext.crossbuildVersion}${project.rootProject.ext.sparkVersionQualifier}.gradle"

    test {
        minHeapSize = "1024m"
        maxHeapSize = "4096m"
        // jvmArgs for JDK11
//        jvmArgs = ["-Djdk.attach.allowAttachSelf=true",
//                   "--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED",
//                   "--add-exports", "java.base/jdk.internal.ref=ALL-UNNAMED",
//                   "--add-exports", "java.base/sun.nio.ch=ALL-UNNAMED",
//                   "--add-exports", "java.management.rmi/com.sun.jmx.remote.internal.rmi=ALL-UNNAMED",
//                   "--add-exports", "java.rmi/sun.rmi.registry=ALL-UNNAMED",
//                   "--add-exports", "java.rmi/sun.rmi.server=ALL-UNNAMED",
//                   "--add-exports", "java.sql/java.sql=ALL-UNNAMED",
//                   "--add-opens", "java.base/java.lang.module=ALL-UNNAMED",
//                   "--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED",
//                   "--add-opens", "java.base/jdk.internal.ref=ALL-UNNAMED",
//                   "--add-opens", "java.base/jdk.internal.reflect=ALL-UNNAMED",
//                   "--add-opens", "java.base/jdk.internal.math=ALL-UNNAMED",
//                   "--add-opens", "java.base/jdk.internal.module=ALL-UNNAMED",
//                   "--add-opens", "java.base/jdk.internal.util.jar=ALL-UNNAMED",
//                   "--add-opens", "jdk.management/com.sun.management.internal=ALL-UNNAMED"]
        maxParallelForks = Math.max(Runtime.runtime.availableProcessors() * 2, 8)
    }

    dependencies {
        configurations.all {
            resolutionStrategy.force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        }

        implementation project(path: ':fourzero', configuration: 'shadow')
        compileOnly "org.apache.spark:spark-core_${scalaMajorVersion}:${sparkVersion}"
        compileOnly "org.apache.spark:spark-sql_${scalaMajorVersion}:${sparkVersion}"
        testImplementation "junit:junit:${project.rootProject.junitVersion}"
        testImplementation "org.quicktheories:quicktheories:${project.rootProject.quickTheoriesVersion}"
        testImplementation "org.slf4j:slf4j-simple:1.7.26"
        testImplementation "org.mockito:mockito-all:${project.rootProject.mockitoVersion}"
        testImplementation "org.apache.spark:spark-core_${scalaMajorVersion}:${sparkVersion}"
        testImplementation "org.apache.spark:spark-sql_${scalaMajorVersion}:${sparkVersion}"
        testImplementation "org.apache.httpcomponents:httpclient:4.5.13"
    }

    /* Start: Jacoco check */
    jacoco {
        toolVersion = "0.8.4"
    }

    task jacocoMerge(type: JacocoMerge) {
        destinationFile = new File(project.buildDir, 'jacoco/mergedFile.exec')
        executionData = files(/*"$buildDir/jacoco/integTest.exec",*/"$buildDir/jacoco/test.exec")
    }

    jacocoTestReport {
        dependsOn tasks.jacocoMerge
        executionData tasks.jacocoMerge.executionData
        reports {
            xml.required = true
            html.required = true
            xml.outputLocation
            html.destination file("$buildDir/reports/jacocoHtml")
        }
    }

    jacocoTestCoverageVerification {
        dependsOn jacocoMerge
        executionData tasks.jacocoMerge.executionData
        violationRules {
            rule {
                limit {
                    minimum = 0.65
                }
            }
        }
    }

    check {
        dependsOn jacocoTestCoverageVerification
        finalizedBy jacocoTestReport
    }

    /* End: Jacoco check */
}
